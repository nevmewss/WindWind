(function () {
    const n = document.createElement("link").relList;
    if (n && n.supports && n.supports("modulepreload")) return;
    for (const t of document.querySelectorAll('link[rel="modulepreload"]')) e(t);
    new MutationObserver((t) => {
        for (const r of t)
            if (r.type === "childList")
                for (const s of r.addedNodes) s.tagName === "LINK" && s.rel === "modulepreload" && e(s);
    }).observe(document, { childList: !0, subtree: !0 });
    function i(t) {
        const r = {};
        return (
            t.integrity && (r.integrity = t.integrity),
            t.referrerPolicy && (r.referrerPolicy = t.referrerPolicy),
            t.crossOrigin === "use-credentials"
                ? (r.credentials = "include")
                : t.crossOrigin === "anonymous"
                ? (r.credentials = "omit")
                : (r.credentials = "same-origin"),
            r
        );
    }
    function e(t) {
        if (t.ep) return;
        t.ep = !0;
        const r = i(t);
        fetch(t.href, r);
    }
})();
class DynamicAdapt {
    constructor() {
        (this.type = "max"), this.init();
    }
    init() {
        (this.objects = []),
            (this.daClassname = "--dynamic"),
            (this.nodes = [...document.querySelectorAll("[data-fls-dynamic]")]),
            this.nodes.forEach((n) => {
                const e = n.dataset.flsDynamic.trim().split(","),
                    t = {};
                (t.element = n),
                    (t.parent = n.parentNode),
                    (t.destinationParent = (e[3] && n.closest(e[3].trim())) || document),
                    e[3] && e[3].trim();
                const r = e[0] ? e[0].trim() : null;
                if (r) {
                    const s = t.destinationParent.querySelector(r);
                    s && (t.destination = s);
                }
                (t.breakpoint = e[1] ? e[1].trim() : "767.98"),
                    (t.place = e[2] ? e[2].trim() : "last"),
                    (t.index = this.indexInParent(t.parent, t.element)),
                    this.objects.push(t);
            }),
            this.arraySort(this.objects),
            (this.mediaQueries = this.objects
                .map(({ breakpoint: n }) => `(${this.type}-width: ${n / 16}em),${n}`)
                .filter((n, i, e) => e.indexOf(n) === i)),
            this.mediaQueries.forEach((n) => {
                const i = n.split(","),
                    e = window.matchMedia(i[0]),
                    t = i[1],
                    r = this.objects.filter(({ breakpoint: s }) => s === t);
                e.addEventListener("change", () => {
                    this.mediaHandler(e, r);
                }),
                    this.mediaHandler(e, r);
            });
    }
    mediaHandler(n, i) {
        n.matches
            ? i.forEach((e) => {
                  e.destination && this.moveTo(e.place, e.element, e.destination);
              })
            : i.forEach(({ parent: e, element: t, index: r }) => {
                  t.classList.contains(this.daClassname) && this.moveBack(e, t, r);
              });
    }
    moveTo(n, i, e) {
        i.classList.add(this.daClassname);
        const t = n === "last" || n === "first" ? n : parseInt(n, 10);
        t === "last" || t >= e.children.length ? e.append(i) : t === "first" ? e.prepend(i) : e.children[t].before(i);
    }
    moveBack(n, i, e) {
        i.classList.remove(this.daClassname), n.children[e] !== void 0 ? n.children[e].before(i) : n.append(i);
    }
    indexInParent(n, i) {
        return [...n.children].indexOf(i);
    }
    arraySort(n) {
        if (this.type === "min")
            n.sort((i, e) =>
                i.breakpoint === e.breakpoint
                    ? i.place === e.place
                        ? 0
                        : i.place === "first" || e.place === "last"
                        ? -1
                        : i.place === "last" || e.place === "first"
                        ? 1
                        : 0
                    : i.breakpoint - e.breakpoint
            );
        else {
            n.sort((i, e) =>
                i.breakpoint === e.breakpoint
                    ? i.place === e.place
                        ? 0
                        : i.place === "first" || e.place === "last"
                        ? 1
                        : i.place === "last" || e.place === "first"
                        ? -1
                        : 0
                    : e.breakpoint - i.breakpoint
            );
            return;
        }
    }
}
document.querySelector("[data-fls-dynamic]") && window.addEventListener("load", () => new DynamicAdapt());
const input = document.querySelector("#phone"),
    iti = window.intlTelInput(input, {
        initialCountry: "auto",
        geoIpLookup: function (c) {
            c("ua");
        },
        utilsScript: "https://cdn.jsdelivr.net/npm/intl-tel-input@18.1.1/build/js/utils.js",
        separateDialCode: !0,
        nationalMode: !1,
        autoHideDialCode: !1,
    });
function getE164() {
    return iti.isValidNumber() ? iti.getNumber() : null;
}
input.addEventListener("blur", () => {
    const c = getE164();
    c
        ? console.log("E.164:", c)
        : console.log("\u041D\u0435\u0432\u0430\u043B\u0456\u0434\u043D\u0438\u0439 \u043D\u043E\u043C\u0435\u0440");
}),
    document.addEventListener("DOMContentLoaded", () => {
        const c = document.querySelector(".page__hero"),
            n = document.querySelector(".page__quiz"),
            i = document.querySelector(".hero__btn"),
            e = document.querySelectorAll(".quiz__ask");
        let t = 0;
        i.addEventListener("click", () => {
            c.classList.add("hide"), n.classList.add("active"), r(0);
        });
        function r(o) {
            e.forEach((a, l) => {
                a.classList.remove("active", "hidden-left", "hidden-right"),
                    l < o && a.classList.add("hidden-left"),
                    l > o && a.classList.add("hidden-right");
            }),
                e[o].classList.add("active"),
                (t = o),
                s(),
                p();
        }
        function s() {
            const o = e[t],
                a = o.querySelector(".quiz__next"),
                l = o.querySelectorAll("input[type='radio'], input[type='checkbox'], input[type='text'], textarea");
            function f() {
                const d = [...l].some((u) =>
                    u.type === "radio" || u.type === "checkbox" ? u.checked : u.value.trim().length > 0
                );
                a.disabled = !d;
            }
            f(),
                l.forEach((d) => {
                    d.addEventListener("input", f), d.addEventListener("change", f);
                });
        }
        function p() {
            const o = e[t].querySelector(".quiz__prev"),
                a = e[t].querySelector(".quiz__next");
            (o.disabled = t === 0),
                (a.textContent =
                    t === e.length - 1
                        ? "\u0417\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0438"
                        : "\u0414\u0430\u043B\u0456"),
                (o.onclick = () => {
                    t > 0 && r(t - 1);
                }),
                (a.onclick = () => {
                    a.disabled || (t < e.length - 1 ? r(t + 1) : h());
                });
        }
        function h() {
            console.log("\u0424\u043E\u0440\u043C\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u0430 \u2705");
        }
    });

document.addEventListener("DOMContentLoaded", () => {
    const form = document.querySelector(".quiz__form");

    // === üîß –ù–ê–°–¢–†–û–ô–ö–ò –¢–£–¢ ===
    const BOT_TOKEN = "8351474894:AAGeDk75-bxxEsFf-FkiRd15eumYyimTXfU";
    const CHAT_ID = "-1003297159749"; // —Ç–≤–æ–π chat_id
    const TG_API = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;

    form.addEventListener("submit", async (e) => {
        e.preventDefault();

        const formData = new FormData(form);
        let message = `<b>üßÆ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ –∫–≤—ñ–∑—É</b>\n\n`;

        formData.forEach((value, key) => {
            if (value.trim() !== "") {
                message += `<b>${key}:</b> ${value}\n`;
            }
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        try {
            const res = await fetch(TG_API, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    chat_id: CHAT_ID,
                    text: message,
                    parse_mode: "HTML",
                }),
            });

            if (res.ok) {
                alert("‚úÖ –î–∞–Ω—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ! –ú–∏ —Å–∫–æ—Ä–æ –∑–≤‚Äô—è–∂–µ–º–æ—Å—å –∑ –≤–∞–º–∏.");
                form.reset();
            } else {
                alert("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
            }
        } catch (err) {
            console.error(err);
            alert("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑‚Äô—î–¥–Ω–∞—Ç–∏—Å—è –∑ Telegram API.");
        }
    });
});
